% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/c4a_series_add.R
\name{c4a_series_add}
\alias{c4a_series_add}
\alias{c4a_series_add_as_is}
\alias{c4a_series_remove}
\title{Add and remove palette series}
\usage{
c4a_series_add(
  x,
  xNA = NA,
  types,
  series,
  format.palette.name = TRUE,
  remove.blacks = TRUE,
  take.gray.for.NA = TRUE,
  remove.other.grays = FALSE,
  light.to.dark = TRUE,
  remove.names = TRUE,
  biv.method = "byrow"
)

c4a_series_add_as_is(
  ...,
  format.palette.name = FALSE,
  remove.blacks = FALSE,
  take.gray.for.NA = FALSE,
  remove.other.grays = FALSE,
  light.to.dark = FALSE,
  remove.names = FALSE
)

c4a_series_remove(series = "all", are.you.sure = FALSE)
}
\arguments{
\item{x}{named list of color palettes. See details for indexing.}

\item{xNA}{colors for missing values. Vector of the same length as x (or length 1). For \code{NA} values, the color for missing values is automatically determined (preferable a light grayscale color, but if it is indistinguishable by color blind people, a light color with a low chroma value is selected)}

\item{types}{character vector of the same length as x (or length 1), which determines the type of palette \code{"cat"}, \code{"seq"}, or \code{"div"}.}

\item{series}{for \code{c4a_series_add}, a character vector of the same length as x (or length 1), which determines the series. For \code{c4a_series_remove} a character vector of series names that should be removed (use \code{"all"} to remove all).}

\item{format.palette.name}{should palette names be formatted to lowercase/underscore format?}

\item{remove.blacks, take.gray.for.NA, remove.other.grays}{These arguments determine the processing of grayscale colors for categorical \code{"cat"} palettes: if \code{remove.blacks} and there are (near) blacks, these are removed first. Next, if \code{take.gray.for.NA}, \code{xNA} is \code{NA}, and a palette contains at least one grayscale color (which can also be white), this is used as color for missing values. In case there are more than one grayscale color, the lightest is taken. \code{remove.other.grays} determines what happens with the other grays.}

\item{light.to.dark}{should sequential \code{"seq"} palettes be automatically ordered from light to dark?}

\item{remove.names}{should individual color names be removed?}

\item{biv.method}{method to a create bivariate palette. Options are \code{"byrow"} means that the colors are wrapped row-wise to a color matrix where the number of rows and columns is automatically determined, \code{"byrowX"} the same but with X (integer between 2 and 9) columns, \code{"bycol"} and \verb{"bycolX} similar but wrapped column-wise. \code{"div2seqseq"} and \verb{"div2divseq} means that colors are extracted from a divering palette. The former translates colors into a matrix with the neutral color in the diagonal, while the latter places the neutral color in the middle column.}

\item{...}{passed on to \code{c4a_series_add}}

\item{are.you.sure}{are you sure you want to remove series?}
}
\description{
Add and remove palette series. \code{c4a_series_add} can be used to add own palette series and  \code{c4a_series_remove} to remove palette series. \code{c4a_series_add_as_is} is the same as \code{c4a_series_add}, but by default without any processing. These functions require the R package \code{colorblindcheck}.
}
\details{
Indexing: for a categorical \code{"cat"} palette, an optional \code{"index"} attribute determines which colors to use for which lengths: if the palette consists of k colors, index should be a list of k, where the i-th element is an integer vector of length i with values 1,2,...,k. See \code{cols4all::.z$palette$rainbow} and  for an example.

It may take some time to process, especially large categorical palettes, because of calculations of the color blind checks
}
\examples{
#######################################
# Palettes from Statistics Netherlands
#######################################
cbsnl_cols = list(
	cool = c("#00a1cd", "#0058b8", "#afcb05", "#53a31d",
		"#f39200", "#af0e80", "#ffcc00", "#e94c0a"),
	warm = c("#e94c0a", "#ffcc00", "#af0e80", "#f39200",
		"#53a31d", "#afcb05", "#0058b8", "#00a1cd"),
	blues = c("#c0e7ff", "#77cbe5", "#3d95d4", "#2256a0", "#143564"),
	reds =  c("#ffc597", "#f89e6b", "#e74d15", "#c01f26", "#82001e"),
	greens = c("#edf0c7", "#c9de85", "#85bc22", "#348a3a", "#0f5f34"),
	purples = c("#f8c1d9", "#e38cbf", "#be3e8d", "#8b176f", "#460042")
)

cbsnl_types = c("cat", "cat", "seq", "seq", "seq", "seq")

c4a_series_add(cbsnl_cols, xNA = "grey88", types = cbsnl_types, series = "cbsnl")

\dontrun{
c4a_gui(series = "cbsnl", n = 8)
}

# Palettes proposed by
# M.A. Petroff (2021), Accessible Color Sequences for Data Visualization,
# https://arxiv.org/pdf/2107.02270.pdf
rgb2hex = function(x) rgb(x[1], x[2], x[3], maxColorValue = 255)

petroff = local({
	rgb6 = list(c(87,144,252),
		 c(248,156,32),
		 c(228,37,54),
		 c(150,74,139),
		 c(156,156,161),
		 c(122,33,221))

	rgb8 = list(c(24,69,251),
		 c(255,94,2),
		 c(201,31,22),
		 c(200,73,169),
		 c(173,173,125),
		 c(134,200,221),
		 c(87,141,255),
		 c(101,99,100))

	rgb10 = list(c(63,144,218),
		 c(255,169,14),
		 c(189,31,1),
		 c(148,164,162),
		 c(131,45,182),
		 c(169,107,89),
		 c(231,99,0),
		 c(185,172,112),
		 c(113,117,129),
		 c(146,218,221))


	list(petroff6 = sapply(rgb6, rgb2hex),
		 petroff8 = sapply(rgb8, rgb2hex),
		 petroff10 = sapply(rgb10, rgb2hex))
})
petroff2 = list(petroff9 = petroff$petroff10[-9])

c4a_series_add_as_is(petroff, xNA = NA, types = "cat", series = "petroff")
c4a_series_add_as_is(petroff2, xNA = petroff$petroff10[9], types = "cat", series = "petroff")
}
